/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {DispatchLocation} from './DispatchLocation';
import {InvoiceRequest} from './InvoiceRequest';

/**
 * The DispatchRequestV3 model module.
 * @module model/DispatchRequestV3
 * @version 3.0
 */
export class DispatchRequestV3 {
  /**
   * Constructs a new <code>DispatchRequestV3</code>.
   * @alias module:model/DispatchRequestV3
   * @class
   * @param tentativeDeliveryDate {Date} 
   * @param dispatchDate {Date} 
   * @param invoice {module:model/InvoiceRequest} 
   */
  constructor(tentativeDeliveryDate, dispatchDate, invoice) {
    this.tentativeDeliveryDate = tentativeDeliveryDate;
    this.dispatchDate = dispatchDate;
    this.invoice = invoice;
  }

  /**
   * Constructs a <code>DispatchRequestV3</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DispatchRequestV3} obj Optional instance to populate.
   * @return {module:model/DispatchRequestV3} The populated <code>DispatchRequestV3</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DispatchRequestV3();
      if (data.hasOwnProperty('shipmentId'))
        obj.shipmentId = ApiClient.convertToType(data['shipmentId'], 'String');
      if (data.hasOwnProperty('tentativeDeliveryDate'))
        obj.tentativeDeliveryDate = ApiClient.convertToType(data['tentativeDeliveryDate'], 'Date');
      if (data.hasOwnProperty('dispatchDate'))
        obj.dispatchDate = ApiClient.convertToType(data['dispatchDate'], 'Date');
      if (data.hasOwnProperty('deliveryPartner'))
        obj.deliveryPartner = ApiClient.convertToType(data['deliveryPartner'], 'String');
      if (data.hasOwnProperty('trackingId'))
        obj.trackingId = ApiClient.convertToType(data['trackingId'], 'String');
      if (data.hasOwnProperty('locationId'))
        obj.locationId = ApiClient.convertToType(data['locationId'], 'String');
      if (data.hasOwnProperty('invoice'))
        obj.invoice = InvoiceRequest.constructFromObject(data['invoice']);
      if (data.hasOwnProperty('dispatchLocation'))
        obj.dispatchLocation = DispatchLocation.constructFromObject(data['dispatchLocation']);
    }
    return obj;
  }
}

/**
 * @member {String} shipmentId
 */
DispatchRequestV3.prototype.shipmentId = undefined;

/**
 * @member {Date} tentativeDeliveryDate
 */
DispatchRequestV3.prototype.tentativeDeliveryDate = undefined;

/**
 * @member {Date} dispatchDate
 */
DispatchRequestV3.prototype.dispatchDate = undefined;

/**
 * @member {String} deliveryPartner
 */
DispatchRequestV3.prototype.deliveryPartner = undefined;

/**
 * @member {String} trackingId
 */
DispatchRequestV3.prototype.trackingId = undefined;

/**
 * @member {String} locationId
 */
DispatchRequestV3.prototype.locationId = undefined;

/**
 * @member {module:model/InvoiceRequest} invoice
 */
DispatchRequestV3.prototype.invoice = undefined;

/**
 * @member {module:model/DispatchLocation} dispatchLocation
 */
DispatchRequestV3.prototype.dispatchLocation = undefined;

