/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BulkActionProgressResponse} from '../model/BulkActionProgressResponse';
import {BulkConfirmResponseV2} from '../model/BulkConfirmResponseV2';
import {BulkRtdActionRequest} from '../model/BulkRtdActionRequest';
import {BulkRtdResponse} from '../model/BulkRtdResponse';
import {CancelRequestV2} from '../model/CancelRequestV2';
import {FetchOrderItemsResponse} from '../model/FetchOrderItemsResponse';
import {GenerateLabelRequestV2} from '../model/GenerateLabelRequestV2';
import {InvoicesSearchResponseV2} from '../model/InvoicesSearchResponseV2';
import {OrderItem} from '../model/OrderItem';
import {OrderItemCancelResponse} from '../model/OrderItemCancelResponse';
import {SearchOrderItemRequest} from '../model/SearchOrderItemRequest';
import {SearchOrderItemResponseV2} from '../model/SearchOrderItemResponseV2';
import {ServiceAttemptRequest} from '../model/ServiceAttemptRequest';
import {ServiceCompleteRequest} from '../model/ServiceCompleteRequest';
import {ServiceResponseStatusV2} from '../model/ServiceResponseStatusV2';
import {ShipmentSearchResponse} from '../model/ShipmentSearchResponse';
import {ShipmentsDeliverAttemptRequestV2} from '../model/ShipmentsDeliverAttemptRequestV2';
import {ShipmentsDeliverRequestV2} from '../model/ShipmentsDeliverRequestV2';
import {ShipmentsDeliverResponseV2} from '../model/ShipmentsDeliverResponseV2';
import {ShipmentsDispatchRequestV2} from '../model/ShipmentsDispatchRequestV2';
import {ShipmentsDispatchResponseV2} from '../model/ShipmentsDispatchResponseV2';

/**
* OrdersV2 service.
* @module api/OrdersV2Api
* @version 3.0
*/
export class OrdersV2Api {

    /**
    * Constructs a new OrdersV2Api. 
    * @alias module:api/OrdersV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelOrders operation.
     * @callback moduleapi/OrdersV2Api~cancelOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItemCancelResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order items
     * This operation allows client to cancel order items before marking them &#x60;PACKED&#x60;
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelRequestV2} opts.body 
     * @param {module:api/OrdersV2Api~cancelOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelOrders(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderItemCancelResponse;

      return this.apiClient.callApi(
        '/v2/orders/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBulkActionProgressByRequestId operation.
     * @callback moduleapi/OrdersV2Api~getBulkActionProgressByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkActionProgressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check label generation status
     * This operation returns the status of the label generation process which was triggered using &#x60;POST /v2/orders/labels&#x60; API. Query param &#x60;requestId&#x60; is the same value which is returned in the response of &#x60;POST /v2/orders/labels&#x60; API
     * @param {String} requestId 
     * @param {module:api/OrdersV2Api~getBulkActionProgressByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBulkActionProgressByRequestId(requestId, callback) {
      
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getBulkActionProgressByRequestId");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkActionProgressResponse;

      return this.apiClient.callApi(
        '/v2/orders/labelRequest/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoicesInfo operation.
     * @callback moduleapi/OrdersV2Api~getInvoicesInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoicesSearchResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice details for order items
     * This operation returns the GST tax details, invoice number and date for the order items
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderItemIds 
     * @param {module:api/OrdersV2Api~getInvoicesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInvoicesInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'orderItemIds': opts['orderItemIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoicesSearchResponseV2;

      return this.apiClient.callApi(
        '/v2/orders/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLabels operation.
     * @callback moduleapi/OrdersV2Api~getLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download labels and invoices in PDF format for order items
     * This operation returns the labels and invoices for the order items in PDF format. Label and invoice must have been generated before invoking this method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderItemIds Comma separated order items ids
     * @param {module:api/OrdersV2Api~getLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'orderItemIds': opts['orderItemIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/orders/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getManifestPdfForRequest operation.
     * @callback moduleapi/OrdersV2Api~getManifestPdfForRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download manifest PDF
     * This operation returns the manifest file in PDF format
     * @param {module:api/OrdersV2Api~getManifestPdfForRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getManifestPdfForRequest(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/orders/manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderItemById operation.
     * @callback moduleapi/OrdersV2Api~getOrderItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of order item
     * This operation returns details for the order item id
     * @param {String} orderItemId A single order item id
     * @param {module:api/OrdersV2Api~getOrderItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderItemById(orderItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling getOrderItemById");
      }

      let pathParams = {
        'order_item_id': orderItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderItem;

      return this.apiClient.callApi(
        '/v2/orders/{order_item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderItemsByIds operation.
     * @callback moduleapi/OrdersV2Api~getOrderItemsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchOrderItemsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of order items
     * This operation returns details for the order item ids passed in the query param. This is a bulk version of &#x60;GET /v2/orders/{order_item_id}&#x60; API
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderItemIds Comma separated order item ids
     * @param {module:api/OrdersV2Api~getOrderItemsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderItemsByIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'orderItemIds': opts['orderItemIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FetchOrderItemsResponse;

      return this.apiClient.callApi(
        '/v2/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getShipments operation.
     * @callback moduleapi/OrdersV2Api~getShipmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentSearchResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipping related details of order items
     * This operation returns shipping and tracking related details of the order items e.g delivery / billing address, tracking id, buyer address, etc. Buyer contact number and email address would be provided only for self-ship orders.
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderItemIds 
     * @param {module:api/OrdersV2Api~getShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getShipments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'orderItemIds': opts['orderItemIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShipmentSearchResponse;

      return this.apiClient.callApi(
        '/v2/orders/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchOrderItemRequest operation.
     * @callback moduleapi/OrdersV2Api~searchOrderItemRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchOrderItemResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search order items using filters
     * This operation returns order items based on applied filters
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchOrderItemRequest} opts.body 
     * @param {module:api/OrdersV2Api~searchOrderItemRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchOrderItemRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = SearchOrderItemResponseV2;

      return this.apiClient.callApi(
        '/v2/orders/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitBulkConfirmRequest operation.
     * @callback moduleapi/OrdersV2Api~submitBulkConfirmRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkConfirmResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger label generation for order items
     * This operation triggers the generation of invoice and shipping labels for the order items and marks them as &#x60;PACKED&#x60;
     * @param {Object} opts Optional parameters
     * @param {module:model/GenerateLabelRequestV2} opts.body 
     * @param {module:api/OrdersV2Api~submitBulkConfirmRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitBulkConfirmRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkConfirmResponseV2;

      return this.apiClient.callApi(
        '/v2/orders/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitBulkRtdRequest operation.
     * @callback moduleapi/OrdersV2Api~submitBulkRtdRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkRtdResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark order items ready for dispatch
     * This operation is used to mark the order items as &#x60;READY_TO_DISPATCH&#x60;. It must be invoked after downloading the invoice and label.
     * @param {Object} opts Optional parameters
     * @param {module:model/BulkRtdActionRequest} opts.body 
     * @param {module:api/OrdersV2Api~submitBulkRtdRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitBulkRtdRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkRtdResponse;

      return this.apiClient.callApi(
        '/v2/orders/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShipDeliverAttemptRequest operation.
     * @callback moduleapi/OrdersV2Api~submitSelfShipDeliverAttemptRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDeliverResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update delivery attempt for self-ship order items
     * This operation is used to update the delivery attempt with failure reason and new delivery date for the self-ship order items.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentsDeliverAttemptRequestV2} opts.body 
     * @param {module:api/OrdersV2Api~submitSelfShipDeliverAttemptRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShipDeliverAttemptRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDeliverResponseV2;

      return this.apiClient.callApi(
        '/v2/shipments/deliveryAttempt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShipDeliverRequest operation.
     * @callback moduleapi/OrdersV2Api~submitSelfShipDeliverRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDeliverResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update delivery date for self-ship order items
     * This operation is used to update the delivery date for self-ship order items.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentsDeliverRequestV2} opts.body 
     * @param {module:api/OrdersV2Api~submitSelfShipDeliverRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShipDeliverRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDeliverResponseV2;

      return this.apiClient.callApi(
        '/v2/shipments/delivery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShipmentDispatchRequest operation.
     * @callback moduleapi/OrdersV2Api~submitSelfShipmentDispatchRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDispatchResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark self-ship order items ready for dispatch
     * This operation is used to mark self-ship order items as &#x60;READY_TO_DISPATCH&#x60; from the seller warehouse.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentsDispatchRequestV2} opts.body 
     * @param {module:api/OrdersV2Api~submitSelfShipmentDispatchRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShipmentDispatchRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDispatchResponseV2;

      return this.apiClient.callApi(
        '/v2/shipments/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitServiceAttemptRequest operation.
     * @callback moduleapi/OrdersV2Api~submitServiceAttemptRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResponseStatusV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update service attempts
     * This operation is used to update the service attempt with failure reason and new delivery date.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceAttemptRequest} opts.body 
     * @param {module:api/OrdersV2Api~submitServiceAttemptRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitServiceAttemptRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceResponseStatusV2;

      return this.apiClient.callApi(
        '/v2/services/attempt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitServiceCompleteRequest operation.
     * @callback moduleapi/OrdersV2Api~submitServiceCompleteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResponseStatusV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update services as complete
     * This operation is used to mark the services as complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceCompleteRequest} opts.body 
     * @param {module:api/OrdersV2Api~submitServiceCompleteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitServiceCompleteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceResponseStatusV2;

      return this.apiClient.callApi(
        '/v2/services/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}