/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateCourierReturnRequest} from '../model/CreateCourierReturnRequest';
import {CreateCourierReturnResponse} from '../model/CreateCourierReturnResponse';
import {CreateService} from '../model/CreateService';
import {CreateTestOrdersRequest} from '../model/CreateTestOrdersRequest';
import {CreateTestOrdersResponse} from '../model/CreateTestOrdersResponse';
import {MakeOrderUnHold} from '../model/MakeOrderUnHold';
import {MarkOrderItemDelivered} from '../model/MarkOrderItemDelivered';
import {MarkOrderItemPickupComplete} from '../model/MarkOrderItemPickupComplete';
import {MarkOrderItemShipped} from '../model/MarkOrderItemShipped';
import {ProcessReturnEvents} from '../model/ProcessReturnEvents';
import {PutOrderOnHold} from '../model/PutOrderOnHold';

/**
* SelfServe service.
* @module api/SelfServeApi
* @version 3.0
*/
export class SelfServeApi {

    /**
    * Constructs a new SelfServeApi. 
    * @alias module:api/SelfServeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the changeDispatchSlots operation.
     * @callback moduleapi/SelfServeApi~changeDispatchSlotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change &#x60;dispatch_by_date&#x60; and &#x60;dispatch_after_date&#x60;
     * This operation changes dispatch_by_date and dispatch_after_date for a specified order item. Please note dispatch dates should be in IST format. For ex &#x27;dispatch_after_date&#x27;:&#x27;YYYY-MM-DDTHH:MM:SS+05:30&#x27;
     * @param {module:model/CreateTestOrdersRequest} body 
     * @param {module:api/SelfServeApi~changeDispatchSlotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changeDispatchSlots(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changeDispatchSlots");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/update_dispatch_slot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createReturn operation.
     * @callback moduleapi/SelfServeApi~createReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create courier or customer return
     * This operation creates return for order in post dispatch state. The return type can be courier or customer
     * @param {module:model/CreateCourierReturnRequest} body 
     * @param {module:api/SelfServeApi~createReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createReturn(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReturn");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/returns/sandbox/create_returns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createService operation.
     * @callback moduleapi/SelfServeApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create forward or reverse services for drop ship orders
     * This operation creates forward or reverse services for self ship order items. PS: Order items should be of type self ship. serviceType field should be either &#x27;FORWARD&#x27; or &#x27;REVERSE&#x27;
     * @param {module:model/CreateService} body 
     * @param {module:api/SelfServeApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createService(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createService");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/v2/shipments/sandbox/create_service/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTestOrders operation.
     * @callback moduleapi/SelfServeApi~createTestOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestOrdersResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create test orders
     * This operation creates test orders in sandbox
     * @param {module:model/CreateTestOrdersRequest} body 
     * @param {module:api/SelfServeApi~createTestOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTestOrders(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTestOrders");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTestOrdersResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/test_orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the makeOrderUnHold operation.
     * @callback moduleapi/SelfServeApi~makeOrderUnHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark order un hold
     * This operation makes specified order item un hold from on hold
     * @param {module:model/MakeOrderUnHold} body 
     * @param {module:api/SelfServeApi~makeOrderUnHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    makeOrderUnHold(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling makeOrderUnHold");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/un_hold', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the markOrderItemDelivered operation.
     * @callback moduleapi/SelfServeApi~markOrderItemDeliveredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark order item as delivered
     * This operation marks specified order item delivered and sends notification for the same
     * @param {module:model/MarkOrderItemDelivered} body 
     * @param {module:api/SelfServeApi~markOrderItemDeliveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    markOrderItemDelivered(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling markOrderItemDelivered");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/delivered', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the markOrderItemPickupComplete operation.
     * @callback moduleapi/SelfServeApi~markOrderItemPickupCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark order item as pick up complete
     * This operation marks specified order item pick up complete and sends notification for the same
     * @param {module:model/MarkOrderItemPickupComplete} body 
     * @param {module:api/SelfServeApi~markOrderItemPickupCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    markOrderItemPickupComplete(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling markOrderItemPickupComplete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/pick_up_complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the markOrderItemShipped operation.
     * @callback moduleapi/SelfServeApi~markOrderItemShippedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark order item as shipped
     * This operation marks specified order item shipped and sends notification for the same
     * @param {module:model/MarkOrderItemShipped} body 
     * @param {module:api/SelfServeApi~markOrderItemShippedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    markOrderItemShipped(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling markOrderItemShipped");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/shipped', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the processReturnEvents operation.
     * @callback moduleapi/SelfServeApi~processReturnEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process return events
     * This operation marks return completed or cancelled and sends notification for the same
     * @param {module:model/ProcessReturnEvents} body 
     * @param {module:api/SelfServeApi~processReturnEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    processReturnEvents(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling processReturnEvents");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/returns/sandbox/return_events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putOrderOnHold operation.
     * @callback moduleapi/SelfServeApi~putOrderOnHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCourierReturnResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put order on hold
     * This operation puts specified order item on hold and sends notification for the same
     * @param {module:model/PutOrderOnHold} body 
     * @param {module:api/SelfServeApi~putOrderOnHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putOrderOnHold(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrderOnHold");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCourierReturnResponse;

      return this.apiClient.callApi(
        '/orders/sandbox/on_hold', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}