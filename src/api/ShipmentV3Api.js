/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CancelShipmentRequest} from '../model/CancelShipmentRequest';
import {DispatchShipmentRequest} from '../model/DispatchShipmentRequest';
import {GetManifestRequest} from '../model/GetManifestRequest';
import {InputStream} from '../model/InputStream';
import {SearchShipmentRequest} from '../model/SearchShipmentRequest';
import {SearchShipmentResponse} from '../model/SearchShipmentResponse';
import {SelfshipDispatchRequestV3} from '../model/SelfshipDispatchRequestV3';
import {ShipmentDetailsResponseV3} from '../model/ShipmentDetailsResponseV3';
import {ShipmentPackRequest} from '../model/ShipmentPackRequest';
import {ShipmentResponse} from '../model/ShipmentResponse';
import {ShipmentStatusResponse} from '../model/ShipmentStatusResponse';
import {ShipmentsDeliverAttemptRequestV2} from '../model/ShipmentsDeliverAttemptRequestV2';
import {ShipmentsDeliverRequestV2} from '../model/ShipmentsDeliverRequestV2';
import {ShipmentsDeliverResponseV2} from '../model/ShipmentsDeliverResponseV2';
import {ShipmentsDispatchResponseV2} from '../model/ShipmentsDispatchResponseV2';
import {UpdateShipmentRequest} from '../model/UpdateShipmentRequest';
import {VendorGroupCodeDetailsResponseV3} from '../model/VendorGroupCodeDetailsResponseV3';

/**
* ShipmentV3 service.
* @module api/ShipmentV3Api
* @version 3.0
*/
export class ShipmentV3Api {

    /**
    * Constructs a new ShipmentV3Api. 
    * @alias module:api/ShipmentV3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelByEnforcedGroupIds operation.
     * @callback moduleapi/ShipmentV3Api~cancelByEnforcedGroupIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order items in a shipment
     * This operation allows client to cancel order items inside shipment before marking them &#x60;PACKED&#x60;
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelShipmentRequest} opts.body 
     * @param {module:api/ShipmentV3Api~cancelByEnforcedGroupIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelByEnforcedGroupIds(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentStatusResponse;

      return this.apiClient.callApi(
        '/v3/shipments/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoicesPdfFromEsi operation.
     * @callback moduleapi/ShipmentV3Api~getInvoicesPdfFromEsiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download invoice PDF
     * This operation provides invoices for shipments in the PDF format. Label and invoice must have been generated before invoking this method.
     * @param {String} shipmentIds Comma separated shipment ids
     * @param {module:api/ShipmentV3Api~getInvoicesPdfFromEsiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvoicesPdfFromEsi(shipmentIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'shipmentIds' is set
      if (shipmentIds === undefined || shipmentIds === null) {
        throw new Error("Missing the required parameter 'shipmentIds' when calling getInvoicesPdfFromEsi");
      }

      let pathParams = {
        'shipmentIds': shipmentIds
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentIds}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLabels operation.
     * @callback moduleapi/ShipmentV3Api~getLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download labels and invoices in PDF format for shipments
     * This operation returns the labels and invoices for the shipments in PDF format
     * @param {String} shipmentIds Comma separated shipment ids
     * @param {module:api/ShipmentV3Api~getLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabels(shipmentIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'shipmentIds' is set
      if (shipmentIds === undefined || shipmentIds === null) {
        throw new Error("Missing the required parameter 'shipmentIds' when calling getLabels");
      }

      let pathParams = {
        'shipmentIds': shipmentIds
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentIds}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLabelsOnly operation.
     * @callback moduleapi/ShipmentV3Api~getLabelsOnlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputStream{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download labels Byte-Stream for shipments
     * This operation returns the labels for the shipments in Byte-Stream format
     * @param {String} shipmentIds Comma separated shipmentIds
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.reprint True to rePrint Label (default to <.>)
     * @param {module:api/ShipmentV3Api~getLabelsOnlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLabelsOnly(shipmentIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shipmentIds' is set
      if (shipmentIds === undefined || shipmentIds === null) {
        throw new Error("Missing the required parameter 'shipmentIds' when calling getLabelsOnly");
      }

      let pathParams = {
        'shipmentIds': shipmentIds
      };
      let queryParams = {
        'reprint': opts['reprint']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = InputStream;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentIds}/labelOnly', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLabelsOnlyPDF operation.
     * @callback moduleapi/ShipmentV3Api~getLabelsOnlyPDFCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download labels in PDF format for shipments
     * This operation returns the labels for the shipments in PDF format
     * @param {String} shipmentIds Comma separated shipment ids
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.reprint True if you are reprinting Label (default to <.>)
     * @param {module:api/ShipmentV3Api~getLabelsOnlyPDFCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabelsOnlyPDF(shipmentIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shipmentIds' is set
      if (shipmentIds === undefined || shipmentIds === null) {
        throw new Error("Missing the required parameter 'shipmentIds' when calling getLabelsOnlyPDF");
      }

      let pathParams = {
        'shipmentIds': shipmentIds
      };
      let queryParams = {
        'reprint': opts['reprint']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentIds}/labelOnly/pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getManifest operation.
     * @callback moduleapi/ShipmentV3Api~getManifestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download manifest PDF
     * This operation returns the manifest file in PDF format
     * @param {Object} opts Optional parameters
     * @param {module:model/GetManifestRequest} opts.body 
     * @param {module:api/ShipmentV3Api~getManifestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getManifest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/shipments/manifest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getShipmentDetails operation.
     * @callback moduleapi/ShipmentV3Api~getShipmentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentDetailsResponseV3{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipping related details for shipments
     * This operation returns shipping and tracking related details of the shipments e.g delivery / billing address, tracking id, buyer address, etc. Buyer contact number and email address would be provided only for self-ship shipments.
     * @param {String} shipmentIds Comma separated shipment ids
     * @param {module:api/ShipmentV3Api~getShipmentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getShipmentDetails(shipmentIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'shipmentIds' is set
      if (shipmentIds === undefined || shipmentIds === null) {
        throw new Error("Missing the required parameter 'shipmentIds' when calling getShipmentDetails");
      }

      let pathParams = {
        'shipmentIds': shipmentIds
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShipmentDetailsResponseV3;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentIds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getShipmentDetailsByInternalId operation.
     * @callback moduleapi/ShipmentV3Api~getShipmentDetailsByInternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order details for given shipment or order ids
     * This operation returns the order related details for the shipments. This operation can accept either shipmentIds, orderIds or orderItemIds, but only one type of query param is accepted per invocation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.shipmentIds Comma separated shipment ids
     * @param {String} opts.orderItemIds Comma separated order item ids
     * @param {String} opts.orderIds Comma separated order ids
     * @param {module:api/ShipmentV3Api~getShipmentDetailsByInternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getShipmentDetailsByInternalId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'shipmentIds': opts['shipmentIds'],'orderItemIds': opts['orderItemIds'],'orderIds': opts['orderIds']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShipmentResponse;

      return this.apiClient.callApi(
        '/v3/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVendorGroupDetails operation.
     * @callback moduleapi/ShipmentV3Api~getVendorGroupDetailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VendorGroupCodeDetailsResponseV3>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipment handover counts per vendor
     * This operation returns the count of shipments to be handed over to the logistics partner (E-Kart or 3rd party vendors)
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationId 
     * @param {module:api/ShipmentV3Api~getVendorGroupDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVendorGroupDetails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'locationId': opts['locationId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VendorGroupCodeDetailsResponseV3];

      return this.apiClient.callApi(
        '/v3/shipments/handover/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the markRTD operation.
     * @callback moduleapi/ShipmentV3Api~markRTDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark shipments ready for dispatch
     * This operation is used to mark the shipments as &#x60;READY_TO_DISPATCH&#x60; after the labels and invoices are generated and downloaded.
     * @param {Object} opts Optional parameters
     * @param {module:model/DispatchShipmentRequest} opts.body 
     * @param {module:api/ShipmentV3Api~markRTDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    markRTD(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentStatusResponse;

      return this.apiClient.callApi(
        '/v3/shipments/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pack operation.
     * @callback moduleapi/ShipmentV3Api~packCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger label generation for shipments
     * This operation triggers the generation of invoice and shipping labels for the shipment ids and marks shipments as &#x60;PACKED&#x60;
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentPackRequest} opts.body 
     * @param {module:api/ShipmentV3Api~packCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pack(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentStatusResponse;

      return this.apiClient.callApi(
        '/v3/shipments/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchPreDispatchShipmentGet operation.
     * @callback moduleapi/ShipmentV3Api~searchPreDispatchShipmentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchShipmentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search shipments using filters
     * This operation should be used if &#x60;hasMore&#x60; is true in the response of &#x60;POST /v3/shipments/filter&#x60; API, so that the client can fetch the next set of shipment which qualify the earlier defined filter criteria. User need not build this URL by themselves, just use the URL returned as &#x60;nextPageUrl&#x60; in the response of &#x60;POST /v3/shipments/filter&#x60; or &#x60;GET /v3/shipments/filter&#x60;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextToken 
     * @param {module:api/ShipmentV3Api~searchPreDispatchShipmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchPreDispatchShipmentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'next_token': opts['nextToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchShipmentResponse;

      return this.apiClient.callApi(
        '/v3/shipments/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchPreDispatchShipmentPost operation.
     * @callback moduleapi/ShipmentV3Api~searchPreDispatchShipmentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchShipmentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search shipments using filters
     * This operation returns shipments based on applied filters
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchShipmentRequest} opts.body 
     * @param {module:api/ShipmentV3Api~searchPreDispatchShipmentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchPreDispatchShipmentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = SearchShipmentResponse;

      return this.apiClient.callApi(
        '/v3/shipments/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShipDeliverAttemptRequest operation.
     * @callback moduleapi/ShipmentV3Api~submitSelfShipDeliverAttemptRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDeliverResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update delivery attempt for self-ship shipments
     * This operation is used to update the delivery attempt with failure reason and new delivery date for the self-ship shipments.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentsDeliverAttemptRequestV2} opts.body 
     * @param {module:api/ShipmentV3Api~submitSelfShipDeliverAttemptRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShipDeliverAttemptRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDeliverResponseV2;

      return this.apiClient.callApi(
        '/v3/shipments/selfShip/deliveryAttempt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShipDeliveryRequest operation.
     * @callback moduleapi/ShipmentV3Api~submitSelfShipDeliveryRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDeliverResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update delivery date for self-ship shipments
     * This operation is used to update the delivery date for self-ship shipments.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentsDeliverRequestV2} opts.body 
     * @param {module:api/ShipmentV3Api~submitSelfShipDeliveryRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShipDeliveryRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDeliverResponseV2;

      return this.apiClient.callApi(
        '/v3/shipments/selfShip/delivery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitSelfShiptDispatchRequest operation.
     * @callback moduleapi/ShipmentV3Api~submitSelfShiptDispatchRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentsDispatchResponseV2{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark self-ship shipments dispatched
     * This operation is used to mark self-ship order items as &#x60;SHIPPED&#x60; from the seller warehouse.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelfshipDispatchRequestV3} opts.body 
     * @param {module:api/ShipmentV3Api~submitSelfShiptDispatchRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitSelfShiptDispatchRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentsDispatchResponseV2;

      return this.apiClient.callApi(
        '/v3/shipments/selfShip/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTrackingInfo operation.
     * @callback moduleapi/ShipmentV3Api~updateTrackingInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Tracking Id of the Shipment
     * This operation is used to update the Tracking Id for self-ship shipments.
     * @param {String} shipmentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateShipmentRequest} opts.body 
     * @param {module:api/ShipmentV3Api~updateTrackingInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrackingInfo(shipmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling updateTrackingInfo");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/shipments/{shipmentId}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}