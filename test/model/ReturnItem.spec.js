/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlipkartMarketplaceApi);
  }
}(this, function(expect, FlipkartMarketplaceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReturnItem', function() {
      beforeEach(function() {
        instance = new FlipkartMarketplaceApi.ReturnItem();
      });

      it('should create an instance of ReturnItem', function() {
        // TODO: update the code to test ReturnItem
        expect(instance).to.be.a(FlipkartMarketplaceApi.ReturnItem);
      });

      it('should have the property orderItemId (base name: "orderItemId")', function() {
        // TODO: update the code to test the property orderItemId
        expect(instance).to.have.property('orderItemId');
        // expect(instance.orderItemId).to.be(expectedValueLiteral);
      });

      it('should have the property locationId (base name: "locationId")', function() {
        // TODO: update the code to test the property locationId
        expect(instance).to.have.property('locationId');
        // expect(instance.locationId).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "orderId")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property orderDate (base name: "orderDate")', function() {
        // TODO: update the code to test the property orderDate
        expect(instance).to.have.property('orderDate');
        // expect(instance.orderDate).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property courierName (base name: "courierName")', function() {
        // TODO: update the code to test the property courierName
        expect(instance).to.have.property('courierName');
        // expect(instance.courierName).to.be(expectedValueLiteral);
      });

      it('should have the property sellerId (base name: "sellerId")', function() {
        // TODO: update the code to test the property sellerId
        expect(instance).to.have.property('sellerId');
        // expect(instance.sellerId).to.be(expectedValueLiteral);
      });

      it('should have the property returnId (base name: "returnId")', function() {
        // TODO: update the code to test the property returnId
        expect(instance).to.have.property('returnId');
        // expect(instance.returnId).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property subReason (base name: "subReason")', function() {
        // TODO: update the code to test the property subReason
        expect(instance).to.have.property('subReason');
        // expect(instance.subReason).to.be(expectedValueLiteral);
      });

      it('should have the property trackingId (base name: "trackingId")', function() {
        // TODO: update the code to test the property trackingId
        expect(instance).to.have.property('trackingId');
        // expect(instance.trackingId).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentStatus (base name: "shipmentStatus")', function() {
        // TODO: update the code to test the property shipmentStatus
        expect(instance).to.have.property('shipmentStatus');
        // expect(instance.shipmentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentId (base name: "shipmentId")', function() {
        // TODO: update the code to test the property shipmentId
        expect(instance).to.have.property('shipmentId');
        // expect(instance.shipmentId).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        // TODO: update the code to test the property comments
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

      it('should have the property updatedDate (base name: "updatedDate")', function() {
        // TODO: update the code to test the property updatedDate
        expect(instance).to.have.property('updatedDate');
        // expect(instance.updatedDate).to.be(expectedValueLiteral);
      });

      it('should have the property approvedOn (base name: "approvedOn")', function() {
        // TODO: update the code to test the property approvedOn
        expect(instance).to.have.property('approvedOn');
        // expect(instance.approvedOn).to.be(expectedValueLiteral);
      });

      it('should have the property expectedDate (base name: "expectedDate")', function() {
        // TODO: update the code to test the property expectedDate
        expect(instance).to.have.property('expectedDate');
        // expect(instance.expectedDate).to.be(expectedValueLiteral);
      });

      it('should have the property serviceProfile (base name: "serviceProfile")', function() {
        // TODO: update the code to test the property serviceProfile
        expect(instance).to.have.property('serviceProfile');
        // expect(instance.serviceProfile).to.be(expectedValueLiteral);
      });

      it('should have the property services (base name: "services")', function() {
        // TODO: update the code to test the property services
        expect(instance).to.have.property('services');
        // expect(instance.services).to.be(expectedValueLiteral);
      });

    });
  });

}));
