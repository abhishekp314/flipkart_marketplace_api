/*
 * Flipkart Marketplace API
 * This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>
 *
 * OpenAPI spec version: 3.0
 * Contact: seller-api-queries@flipkart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlipkartMarketplaceApi);
  }
}(this, function(expect, FlipkartMarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlipkartMarketplaceApi.ShipmentV3Api();
  });

  describe('(package)', function() {
    describe('ShipmentV3Api', function() {
      describe('cancelByEnforcedGroupIds', function() {
        it('should call cancelByEnforcedGroupIds successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelByEnforcedGroupIds call and complete the assertions
          /*
          var opts = {};

          instance.cancelByEnforcedGroupIds(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesPdfFromEsi', function() {
        it('should call getInvoicesPdfFromEsi successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesPdfFromEsi call
          /*

          instance.getInvoicesPdfFromEsi(shipmentIds, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabels', function() {
        it('should call getLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabels call
          /*

          instance.getLabels(shipmentIds, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabelsOnly', function() {
        it('should call getLabelsOnly successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabelsOnly call and complete the assertions
          /*
          var opts = {};

          instance.getLabelsOnly(shipmentIds, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.InputStream);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabelsOnlyPDF', function() {
        it('should call getLabelsOnlyPDF successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabelsOnlyPDF call
          /*
          var opts = {};

          instance.getLabelsOnlyPDF(shipmentIds, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getManifest', function() {
        it('should call getManifest successfully', function(done) {
          // TODO: uncomment, update parameter values for getManifest call
          /*
          var opts = {};

          instance.getManifest(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentDetails', function() {
        it('should call getShipmentDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentDetails call and complete the assertions
          /*

          instance.getShipmentDetails(shipmentIds, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentDetailsResponseV3);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentDetailsByInternalId', function() {
        it('should call getShipmentDetailsByInternalId successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentDetailsByInternalId call and complete the assertions
          /*
          var opts = {};

          instance.getShipmentDetailsByInternalId(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVendorGroupDetails', function() {
        it('should call getVendorGroupDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getVendorGroupDetails call and complete the assertions
          /*
          var opts = {};

          instance.getVendorGroupDetails(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FlipkartMarketplaceApi.VendorGroupCodeDetailsResponseV3);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('markRTD', function() {
        it('should call markRTD successfully', function(done) {
          // TODO: uncomment, update parameter values for markRTD call and complete the assertions
          /*
          var opts = {};

          instance.markRTD(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pack', function() {
        it('should call pack successfully', function(done) {
          // TODO: uncomment, update parameter values for pack call and complete the assertions
          /*
          var opts = {};

          instance.pack(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchPreDispatchShipmentGet', function() {
        it('should call searchPreDispatchShipmentGet successfully', function(done) {
          // TODO: uncomment, update parameter values for searchPreDispatchShipmentGet call and complete the assertions
          /*
          var opts = {};

          instance.searchPreDispatchShipmentGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.SearchShipmentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchPreDispatchShipmentPost', function() {
        it('should call searchPreDispatchShipmentPost successfully', function(done) {
          // TODO: uncomment, update parameter values for searchPreDispatchShipmentPost call and complete the assertions
          /*
          var opts = {};

          instance.searchPreDispatchShipmentPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.SearchShipmentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitSelfShipDeliverAttemptRequest', function() {
        it('should call submitSelfShipDeliverAttemptRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for submitSelfShipDeliverAttemptRequest call and complete the assertions
          /*
          var opts = {};

          instance.submitSelfShipDeliverAttemptRequest(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentsDeliverResponseV2);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitSelfShipDeliveryRequest', function() {
        it('should call submitSelfShipDeliveryRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for submitSelfShipDeliveryRequest call and complete the assertions
          /*
          var opts = {};

          instance.submitSelfShipDeliveryRequest(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentsDeliverResponseV2);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitSelfShiptDispatchRequest', function() {
        it('should call submitSelfShiptDispatchRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for submitSelfShiptDispatchRequest call and complete the assertions
          /*
          var opts = {};

          instance.submitSelfShiptDispatchRequest(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FlipkartMarketplaceApi.ShipmentsDispatchResponseV2);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTrackingInfo', function() {
        it('should call updateTrackingInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTrackingInfo call
          /*
          var opts = {};

          instance.updateTrackingInfo(shipmentId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
